<?xml version='1.0' encoding='UTF-8'?>

<!DOCTYPE rfc [
 <!ENTITY nbsp    "&#160;">
 <!ENTITY zwsp   "&#8203;">
 <!ENTITY nbhy   "&#8209;">
 <!ENTITY wj     "&#8288;">
]>

<rfc xmlns:xi="http://www.w3.org/2001/XInclude"
category="std"
docName="draft-spaghetti-sidrops-rpki-erik-protocol-00"
ipr="trust200902"
xml:lang="en"
sortRefs="true"
submissionType="IETF"
consensus="true"
symRefs="true"
tocInclude="true"
version="3">

  <front>

    <title abbrev="Erik Synchronization Protocol for RPKI">
      The Erik Synchronization Protocol for use with the Resource Public Key Infrastructure (RPKI)
    </title>

    <author fullname="Job Snijders" initials="J." surname="Snijders">
      <organization />
      <address>
        <postal>
          <postalLine>The Netherlands</postalLine>
        </postal>
        <email>job@sobornost.net</email>
      </address>
    </author>

    <author fullname="Tim Bruijnzeels" initials="T." surname="Bruijnzeels">
      <organization>RIPE NCC</organization>
      <address>
        <postal>
          <postalLine>The Netherlands</postalLine>
        </postal>
        <email>tim@ripe.net</email>
      </address>
    </author>

    <author fullname="Tom Harrison" initials="T." surname="Harrison">
      <organization>APNIC</organization>
      <address>
        <postal>
          <country>AU</country>
        </postal>
        <email>tomh@apnic.net</email>
      </address>
    </author>

    <author fullname="Wataru Ohgai" initials="W." surname="Ohgai">
      <organization>JPNIC</organization>
      <address>
        <postal>
          <country>JP</country>
        </postal>
        <email>alt@nic.ad.jp</email>
      </address>
    </author>

    <date/>

   <area>Operations and Management Area (OPS)</area>
   <workgroup>SIDROPS</workgroup>

   <keyword>Data synchronization</keyword>

    <abstract>
      <t>
        This document specifies the Erik Synchronization Protocol for use with the Resource Public Key Infrastructure (RPKI).
        Erik Synchronization can be characterized as a data replication system using Merkle trees, a content-addressable naming scheme, concurrency control using monotonically increasing sequence numbers, and HTTP transport.
        Relying Parties can combine information retrieved via Erik Synchronization with other RPKI transport protocols.
        The protocol's design is intended to be efficient, fast, and easy to implement.
      </t>
    </abstract>

  </front>

  <middle>

    <section anchor="intro">
      <name>Introduction</name>
      <t>
        This document specifies the Erik Synchronization Protocol for use with the Resource Public Key Infrastructure (RPKI) <xref target="RFC6480"/>.
        Erik Synchronization can be characterized as a data replication system using Merkle Trees <xref target="M1987"/>, a content-addressable naming scheme <xref target="RFC6920"/>, concurrency control using monotonically increasing sequence numbers <xref target="RFC0677"/>, and HTTP transport <xref target="RFC9110"/>.
        Relying Parties can combine information retrieved via Erik Synchronization with other RPKI transport protocols (<xref target="RFC5781"/> and <xref target="RFC8182"/>).
        The protocol's design is intended to be efficient, fast, and easy to implement <xref target="RFC1925"/>.
      </t>

      <section anchor="reqs-lang">
        <name>Requirements Language</name>
        <t>
          The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>", "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as described in BCP&nbsp;14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as shown here.</t>
      </section>

      <section anchor="Related">
        <name>Related Work</name>
        <t>
          The reader is assumed to be familiar with the terms and concepts described in
          "<xref target="RFC0677" format="title"/>" <xref target="RFC0677" format="default"/>,
          "<xref target="RFC6480" format="title"/>" <xref target="RFC6480" format="default"/>,
          "<xref target="RFC8182" format="title"/>" <xref target="RFC8182" format="default"/>,
          "<xref target="RFC9286" format="title"/>" <xref target="RFC9286" format="default"/>,
          and "<xref target="M1987" format="title"/>" <xref target="M1987" format="default"/>.
        </t>
      </section>


      <section anchor="glossary">
        <name>Glossary</name>
        <t>
          This section describes the terminology and abbreviations used in this document.
          Though the definitions might not be clear on a first read, later on the terms will be introduce with more detail.
        </t>

        <dl>

           <dt>Erik relay</dt>
           <dd>An intermediate between CA publication repositories and Relying Parties.</dd>

           <dt>FQDN</dt>
           <dd>The fully qualified domain name of a RPKI repository instance referenced in an end-entity certificate's Subject Information Access (SIA) extension's id-ad-signedObject accessDescription.</dd>

           <dt>Hash</dt>
           <dd>A message digest calculated for an object using the SHA-256 algorithm.</dd>

           <dt>Tree head</dt>
           <dd>Also known as "root hash", this is the hash of the current ErikIndex associated with a given FQDN.</dd>

           <dt>ErikIndex</dt>
           <dd>A sorted listing of Partition identifiers and associated ErikPartition objects' hashes.</dd>

           <dt>ErikPartition</dt>
           <dd>A sorted listing of the Manifest objects' hashes, manifestNumbers, and their certificates' SIA extension values.</dd>

           <dt>Snapshot</dt>
           <dd>A compressed tarball archive containing all RPKI objects for a given FQDN.</dd>

        </dl>
      </section>

    </section>

    <section anchor="overview">
      <name>Informal Overview</name>
      <t>
        In this synchronization protocol Merkle trees are used to determine whether differences exist between client and relay.
        Merkle trees are hierarchical data structures: the hash value of each node is computed recursively by hashing the concatenated hash values of the node's children.
        The tree head hash represents the entire dataset.
        If the tree head hash is not the same between two replicas, the relay provides the client with hashes of smaller and smaller portions of the to-be-replicated dataset until the exact list of out-of-sync or missing objects is identified.
        Sequence numbers are then used to determine whether these differences are relevant enough for the client to fetch.
        All data is fetched using addresses derived from hashes (except for the hash tree heads).
        This approach reduces unnecessary data transfer between caches which contain mostly similar data.
      </t>
      <t>
        The client starts by querying an Erik relay for its current tree head for a given FQDN.
        If the tree head is different compared to the previous run (or compared to the tree head calculated from the locally cached objects), the client can fetch the ErikIndex object using the tree head hash.
        With the ErikIndex in hand, the client can determine which ErikParitions changed or are missing and fetch accordingly.
        The client then can compare the <em>manifestNumber</em> sequence number for each Manifest listed in the ErikPartition, and proceed to fetch (purportedly) newer versions of Manifests of interest.
        Whenever a relay offers a Manifest with a lower sequence number the client can ignore it.
        With the information contained within Manifests, clients can fetch addressed by content and store by name.
        The client now has sufficient information to proceed to fetch any missing Certificates, Signed objects, and CRLs.
      </t>
    </section>

    <section anchor="asn1">
      <name>File Formats</name>
      <t>
        In this synchronization protocol the <em>signal layer</em> makes use of DER-encoded messages <xref target="X.690"/>.
      </t>
      <t>
        <em>Design note: DER encoding was selected for its canonical properities and because RPKI cache implementations already support ASN.1 encoding.</em>
      </t>
      <section anchor="asn1-index">
        <name>ASN.1 Definition for ErikIndex objects</name>
        <t>
          An ErikIndex represents all current Manifest objects available under a given FQDN and thus the complete state of the repository as it is known to the relay.
        </t>
<sourcecode type="asn.1" markers="false">
<![CDATA[
RpkiErikIndex-2025
  { iso(1) member-body(2) us(840) rsadsi(113549)
    pkcs(1) pkcs9(9) smime(16) mod(0)
    id-mod-rpkiErikIndex-2025(TBD) }

DEFINITIONS EXPLICIT TAGS ::=
BEGIN

IMPORTS
  Digest, DigestAlgorithmIdentifier
  FROM CryptographicMessageSyntax-2010 -- in [RFC6268]
  { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
    pkcs-9(9) smime(16) modules(0) id-mod-cms-2009(58) }

ErikIndex ::= SEQUENCE {
  version [0]           INTEGER DEFAULT 0,
  indexScope            IA5String,
  indexTime             GeneralizedTime,
  hashAlg               DigestAlgorithmIdentifier,
  previousIndex         Digest OPTIONAL,
  partitionList         SEQUENCE SIZE (1..ub-Partitions) OF PartitionListEntry }

ub-Partitions INTEGER ::= 1024

PartitionListEntry ::= SEQUENCE {
  partitionIdentifier   INTEGER (1..ub-Partitions),
  hash                  Digest }
END]]>
</sourcecode>

        <section title="The version field">
          <t>
            The version number of the ErikIndex object <bcp14>MUST</bcp14> be 0.
          </t>
        </section>

        <section title="The indexScope field">
          <t>
            The <tt>indexScope</tt> field contains the fully qualified domain name of the Signed Object location of the Manifests referenced through this particular ErikIndex.
            The FQDN MUST be in the "preferred name syntax", as specified by <xref target="RFC1034" section="3.5"/> and modified by <xref target="RFC1123" section="2.1"/>.
          </t>
        </section>

        <section title="The indexTime field">
          <t>
            The <tt>indexTime</tt> is the most recent <tt>partitionTime</tt> value among the ErikPartitions referenced from this ErikIndex.
            The field's value roughly indicates when the ErikIndex was generated.
            The field exists for troubleshooting or measurement purposes.
          </t>
          <t>
            For the purposes of this profile, <tt>GeneralizedTime</tt> values MUST be expressed UTC (Zulu) and MUST include seconds (i.e., times are YYYYMMDDHHMMSSZ), even where the number of seconds is zero.
            GeneralizedTime values MUST NOT include fractional seconds.
            See <xref target="RFC5280" section="4.1.2.5.2"/>.
          </t>
          <t>
            <em>
              Design note: using the most recent <tt>partitionTime</tt> (rather than "now") helps reduce churn in distributed systems.
            </em>
          </t>
        </section>

        <section title="The hashAlg field">
          <t>
            This field contains the OID of the hash algorithm used to hash the ErikPartitions.
            The hash algorithm used MUST conform to the RPKI Algorithms and Key Size Profile specification <xref target="RFC7935"/>.
          </t>
        </section>

        <section title="The partitionList field">
          <t>
            This field is a sequence of <tt>ErikIndexEntry</tt> instances.
            There is one <tt>ErikIndexEntry</tt> for each current partition.
            Each <tt>ErikIndexEntry</tt>is a pair consisting of the partition identifier and the hash of the partition object.
          </t>
          <t>
            Information elements are unique with respect to one another and sorted in ascending order of the partition identifier.
          </t>
        </section>

      </section>

      <section anchor="asn1-partition">
        <name>ASN.1 Definition for ErikPartition Objects</name>
        <t>
          An ErikPartition represents a subset of Manifest objects available under a given FQDN.
          Each ErikPartition is a sorted listing of the Manifest objects' hashes, manifestNumbers, and their end-entity certificates' SIA extension values.
        </t>

<sourcecode type="asn.1" markers="false">
<![CDATA[
RpkiErikPartition-2025
  { iso(1) member-body(2) us(840) rsadsi(113549)
    pkcs(1) pkcs9(9) smime(16) mod(0)
    id-mod-rpkiErikPartition-2025(TBD) }

DEFINITIONS EXPLICIT TAGS ::=
BEGIN

IMPORTS
  SubjectInfoAccessSyntax
  FROM PKIX1Explicit88 -- in [RFC5280]
  { iso(1) identified-organization(3) dod(6) internet(1)
  security(5) mechanisms(5) pkix(7) id-mod(0) id-pkix1-implicit(19) }

  Digest, DigestAlgorithmIdentifier
  FROM CryptographicMessageSyntax-2010 -- in [RFC6268]
  { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
    pkcs-9(9) smime(16) modules(0) id-mod-cms-2009(58) }

ErikPartition ::= SEQUENCE {
  version [0]           INTEGER DEFAULT 0,
  partitionTime         GeneralizedTime,
  hashAlg               DigestAlgorithmIdentifier,
  manifestList          SEQUENCE SIZE (1..MAX) OF ManifestListEntry }

ManifestListEntry ::= SEQUENCE {
  hash                  Digest,
  manifestNumber        INTEGER (0..MAX),
  location              OCTET STRING } -- subjectInfoAccess extnValue

END]]>
</sourcecode>

        <section title="The version field">
          <t>
            The version number of the ErikPartition object <bcp14>MUST</bcp14> be 0.
          </t>
        </section>

        <section title="The partitionTime field">
          <t>
            The <tt>partitionTime</tt> is the most recent <tt>thisUpdate</tt> value among the Manifests contained within this ErikPartition.
            The field's value roughly indicates when the ErikPartition was generated.
            The field exists for troubleshooting or measurement purposes.
          </t>
          <t>
            For the purposes of this profile, <tt>GeneralizedTime</tt> values MUST be expressed UTC (Zulu) and MUST include seconds (i.e., times are YYYYMMDDHHMMSSZ), even where the number of seconds is zero.
            GeneralizedTime values MUST NOT include fractional seconds.
            See <xref target="RFC5280" section="4.1.2.5.2"/>.
          </t>
          <t>
            <em>
              Design note: using the most recent Manifest <tt>thisUpdate</tt> value (instead of "now") helps reduce churn in distributed systems.
            </em>
          </t>
        </section>

        <section title="The hashAlg field">
          <t>
            This field contains the OID of the hash algorithm used to hash the Manifest objects referenced in this ErikPartition.
            The hash algorithm used MUST conform to the RPKI Algorithms and Key Size Profile specification <xref target="RFC7935"/>.
          </t>
        </section>

        <section title="The manifestList field">
          <t>
            This field is a sequence of <tt>ManifestListEntry</tt> instances.
            There is one <tt>ManifestListEntry</tt> for each current Manifest.
            A Manifest is nominally current until the time specified in nextUpdate or until a Manifest is issued with a greater manifestNumber, whichever comes first (see <xref target="RFC9286" section="4.2.1"/>).
          </t>
          <t>
            A <tt>ManifestListEntry</tt> is a 3-tuple consisting of the hash of the Manifest object, the manifestNumber contained within the object, and an OCTET STRING containing the Manifest's End-Entity certificate's Subject Information Access extension value.
          </t>
          <t>
            Information elements are unique with respect to one another and sorted in ascending order of the hash.
          </t>
        </section>

      </section>
    </section>

    <section anchor="snapshots">
      <name>Snapshots and Differentials</name>
      <t>
        Clients can bootstrap initial state by fetching a snapshot.
        A snapshot contains all RPKI objects a relay associated with a given FQDN as of the time of the snapshot's production.
        Snapshots do not contain ErikIndex or ErikPartition objects.
        Because snapshots are not produced in lockstep with updates to the merkle trees, clients MUST perform a tree comparison after fetching a snapshot.
      </t>
      <t>
        Snapshots are encoded using the <xref target="ustar" /> format and compressed using GZIP <xref target="RFC1952"/>.
      </t>
      <t>
        Differences between snapshots will be specified at a later time.
      </t>
      <t>
        <em>
          Design notes:
          The ustar format was selected because it is 'streamable', widely available, and an open standard.
          A compressed form is mandated because opportunistic compression in the transport layer (e.g. HTTP compressed content-encoding) is not universally available.
          On the flip side, <tt>.tar.gz</tt> objects likely wont be produced in a deterministic fashion across different implementations, warranting a choice of some other archive format.
        </em>
      </t>
    </section>

    <section anchor="rp">
      <name>Client-side Processing</name>
      <t>
        A client can decide whether or not to fetch ErikIndex and ErikPartition objects, by comparing the hash to previous fetches.
      </t>
      <t>
        A client can decide whether or not to fetch a given Manifest object, by comparing the <tt>manifestNumber</tt> with what's locally cached and what's offered by the remote relay.
      </t>
      <t>
        A client can compute which products listed in the Manifest's fileList need to be fetched from the relay.
      </t>
      <t>
        As there is no concept of 'sessions' (like in RRDP), clients can interchangably use different Erik relay.
        When one Erik relay generates a HTTP error, the client can try fetching the requested object from another Erik relay.
      </t>
    </section>

    <section anchor="error">
      <name>Transport Error Detection and Handling</name>
      <t>
        The client MUST calculate the hash of fetched objects and verify it is the same as the expected hash (which is embedded in the name through which the object was retrieved).
        If there is a hash mismatch, the client may try fetching the object from a different Erik relay or treat this as a <em>failed fetch</em> (see <xref target="RFC9286" section="6.6"/>).
      </t>
    </section>

    <section anchor="relay">
      <name>Setting Up an Erik Relay</name>
      <t>
        Relays generate ErikIndexes and ErikPartitions derived from their current validation state, the client then cherry-picks which objects (if any) it wishes to fetch.
        Relays fetch fresh data from other relays or from CA-designated publication points.
      </t>
      <t>
        <em>
          Design notes: a decision must be made a deterministic "manifest-to-partition" assignment scheme.
          The proof-of-concept relay (see <xref target="running_code"/>) uses the first few octets of the SHA-256 hash of the Manifest for produce as a stable assignment strategy.
          Other strategies could be to assign Manifests to ErikPartitions based on the "hour-of-day" of the CMS signing timestamp.
        </em>
      </t>
    </section>

    <section anchor="comparison">
      <name>Comparison with other RPKI transport protocols</name>

      <t>
        Ignoring obvious "on the wire format" differences between Erik, Rsync, and RRDP; there are a number of key design differences between the protocols.
        Rsync and RRDP can be described as "general purpose" synchronisation protocols, while the Erik protocol design is RPKI-specific.
        In the Erik protocol, Manifest objects (which RPs require for validation anyway) are an integral part of the signaling layer.
      </t>

      <section>
        <name>Comparison with Rsync</name>
        <t>
          In Rsync, the server and the client construct and transfer a full listing of all available objects, and then transfer objects as necessary.
          In effect, this allows clients to 'jump' to the latest repository state, regardless of the state of the local cache.
        </t>
        <t>
          A major downside of Rsync is that the list of files itself can become a burden to transfer.
          As of June 2025, in order to merely establish whether a client is synchronized or not with the RIPE NCC repository at <tt>rpki.ripe.net</tt>, as much as 5.8 megabytes of data are exchanged without exchanging any RPKI data.
        </t>
        <t>
          When synchronizing once an hour, Rsync generally consumes less network traffic than RRDP.
        </t>
      </section>

      <section>
        <name>Comparison with RRDP</name>
        <t>
          The key concept in RRDP is that the client downloads a "journal", containing all add/update/delete operations and replays this journal to arrive at the current repository state.
        </t>
        <t>
          A major downside of RRDP is that (depending on the RRDP polling interval) clients end up downloading data which has become outdated.
          Imagine a hypothetical CA which issues and revokes a ROA every 10 minutes and a client that synchronizes every 60 minutes; in effect the client must fetch 5 outdated states, wasting bandwidth.
        </t>
        <t>
          When synchronizing every 15 minutes, RRDP generally consumes less network traffic than Rsync.
        </t>

        <section>
          <name>Garbage Collection</name>
          <t>
            In contrast to RRDP, the Erik protocol has no concept of server-specific "stateful" sessions that persist across polling attempts, obviating the need for <tt>withdraw</tt> instructions.
            Clients can simply delete objects that are no longer referenced from their current validation state.
            <!-- In a way RRDP servers offer a <em>set menu</em> while Erik relays allow clients to select items <em>a la carte</em>. -->
          </t>
        </section>

      </section>

    </section>

    <section anchor="openquestions" removeInRFC="true">
      <name>Open Questions</name>
       <ul>
         <li>Should the hash tree heads contain a <tt>previous hash</tt> field so clients can observe gaps in chains?</li>
         <li>Should ErikPartitions also list the filesize of the referenced Manifests? Perhaps there are optimisations possible when the filesizes are communicated to clients?</li>
         <li>How to deterministically assign objects to ErikPartitions?</li>
       </ul>
    </section>

    <section anchor="operational">
      <name>Operational Considerations</name>
      <t>
        This document ...
      </t>
    </section>

    <section anchor="security">
      <name>Security Considerations</name>
      <t>
        This document makes no changes to RPKI certificate validation procedures.
      </t>
      <t>
        See <xref target="RFC8182" section="5"/> for applicable security considerations.
      </t>
    </section>

    <section anchor="iana">
      <name>IANA Considerations</name>
      <t>
        The IANA is requested to add an item to the "SMI Security for S/MIME Module Identifier" registry as follows:
      </t>
      <artwork>
<![CDATA[
Decimal  Description                      References
--------------------------------------------------------------
    TDB  id-mod-rpkiErikIndex-2025        [this-draft]
    TDB  id-mod-rpkiErikPartition-2025    [this-draft]
]]>
        </artwork>
    </section>

  </middle>

  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>

        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1123.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1952.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6920.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7935.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9110.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9286.xml"/>

        <reference anchor="X.690" target="https://www.itu.int/rec/T-REC-X.690-202102-I/en" quoteTitle="true" derivedAnchor="X.690">
          <front>
            <title>Information technology - ASN.1 encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)</title>
            <author>
              <organization showOnFrontPage="true">ITU-T</organization>
            </author>
            <date month="February" year="2021"/>
          </front>
          <seriesInfo name="ITU-T Recommendation" value="X.690"/>
          <seriesInfo name="ISO/IEC" value="8825-1:2021"/>
        </reference>

      </references>

      <references>
        <name>Informative References</name>

        <reference anchor="M1987" quoteTitle="true" target="https://doi.org/10.1007/3-540-48184-2_32" derivedAnchor="M1987">
          <front>
            <title>A Digital Signature Based on a Conventional Encryption Function</title>
            <author fullname="R. Merkle" initials="R." surname="Merkle"/>
            <date year="1988"/>
          </front>
          <refcontent>Advances in Cryptology -- CRYPTO '87 Proceedings</refcontent>
          <refcontent>Lecture Notes in Computer Science, Vol. 293</refcontent>
          <seriesInfo name="DOI" value="10.1007/3-540-48184-2_32"/>
        </reference>

        <reference anchor="ustar" target="https://pubs.opengroup.org/onlinepubs/9799919799/utilities/pax.html#tag_20_94_13_06">
          <front>
            <title>ustar Interchange Format</title>
            <author>
              <organization>IEEE/Open Group</organization>
            </author>
            <date year="2024" month="June"/>
          </front>
          <seriesInfo name="IEEE Std" value="1003.1-2024"/>
          <seriesInfo name="DOI" value="10.1109/IEEESTD.2018.8423794"/>
        </reference>

        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.0677.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1925.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5781.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6480.xml"/>
        <xi:include href="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8182.xml"/>

<!--
 later ...
        <reference anchor="rpki-client" target="https://www.rpki-client.org/">
          <front>
            <title>rpki-client</title>
            <author fullname="Claudio Jeker"/>
            <author fullname="Job Snijders"/>
            <author fullname="Kristaps Dzonsons"/>
            <author fullname="Theo Buehler"/>
            <date month="June" year="2024" />
          </front>
        </reference>

-->

      </references>
    </references>

    <section anchor="running_code" title="Implementation status" removeInRFC="true">
      <t>
        This section records the status of known implementations of the protocol defined by this specification at the time of posting of this Internet-Draft, and is based on a proposal described in RFC 7942.
        The description of implementations in this section is intended to assist the IETF in its decision processes in progressing drafts to RFCs.
        Please note that the listing of any individual implementation here does not imply endorsement by the IETF.
        Furthermore, no effort has been spent to verify the information presented here that was supplied by IETF contributors.
        This is not intended as, and must not be construed to be, a catalog of available implementations or their features.
        Readers are advised to note that other implementations may exist.
      </t>

      <t>
        According to RFC 7942, "this will allow reviewers and working groups to assign due consideration to documents that have the benefit of running code, which may serve as evidence of valuable experimentation and feedback that have made the implemented protocols more mature.
        It is up to the individual working groups to use this information as they see fit".
      </t>
      <t>
        An experimental Erik relay is available here: <tt>https://cache.rpki-client.org/rpki/{FQDN}</tt>.
      </t>
      <t>
        An experimental Erik client was developed by Job Snijders using <tt>ksh</tt>, <tt>C</tt>, and <tt>Python</tt>.
      </t>
    </section>

    <section anchor="acknowledgements" numbered="false">
      <name>Acknowledgements</name>
      <t>
        The authors wish to thank
          <contact fullname="George Michaelson"/>,
          <contact fullname="Theo de Raadt"/>,
          <contact fullname="Bob Beck"/>, and
          <contact fullname="Theo Buehler"/>
        for the lovely conversations that led to this proposal.
      </t>
      <t>
        This protocol is named after Erik Bais, who passed away in 2024, as a small token of appreciation for his friendship.
      </t>
    </section>
  </back>
</rfc>
